
For the code: 

-Add good summaries of functions

-Add subscripts such as test for hamiltonians, look details of optimizations, other debugging tools

-Add a way to get the current state of the optimization (e.g. current iteration, current energy, etc.)

-Add verbose option to print the current state of the optimization or other details 

-Better error handling

-Better ways of naming the output files in a more organized way 

-Add a way to save the optimization results in a more organized way and add script to load the results

-Test multiprocessing for the optimization

-Adjust how random ajacency matrices are generated to respect the number of nodes and the number of edges asked 

Graph generation with diffusion MRI data: 

- Généraliser à tout ordre de SH comme les scripts scilpy (inspire-toi des scil_fodf_metrics par exemple) 

- Est-ce qu’on fait une somme des poids lorsqu’on enlève un nœud qui connecte deux autres (en enlevant on ne perd pas d’info) ? 
Je pense qu’on pourrait sommer ou même multiplier. Voir mon papier de proba tracking IEEE TMI 2009 ou celui de Sotiropoulos pour inspiration.
Mais à mon avis, ç’aurait du sens d’accumuler les proba en multipliant quand on enlève un noeud

- Angle dans lequel on moyenne les valeurs de dODF ? 

Ideas for testing the algorithms: 

- Test the algorithms with a simple 4 nodes graph to see if the optimization works at every step for 5 reps

- Test other optimizers than COBYLA 

- Try other optimization methods, VQE


Ideas for visualization: 

- Create a visualization tool to draw the graph by minimizing the number of crossing edges
